---
# ------------------
# SETUP LOCAL VARS
# ------------------

- name: Reset all _local variables
  # This is actually important b/c otherwise these variables are _shared_ across
  # all orthanc containers on this host, so they have to be carefully reset
  set_fact:
    _db_name:    "{{ db_name | default(c_name) }}"
    _link_peers: "{{ link_peers | default(false) }}"
    _config_dir: "{{ base_dir }}/config/orthanc/{{ c_name }}"
    _data_dir:   "{{ base_dir }}/orthanc/db"
    _peers:      "{{ peers | default({}) }}"
    _modalities: "{{ modalities | default({}) }}"
    _ports:      [ "{{ api_port }}:8042" ]

- set_fact:
    _ports: ["{{ api_port }}:8042", "{{dicom_port}}:4242"]
  when: dicom_port is defined

- debug:
    msg: "{{ _ports }}"

- name:         lookup modality items
  set_fact:
    key:        "{{ item }}"
    value:      ["{{ hostvars[item]['dicom_aet'] }}", "{{ hostvars[item]['dicom_host'] }}", "{{ hostvars[item]['dicom_port'] }}"]
  with_items:   "{{ groups['dicom_modalities'] }}"
  register:     mod_items

- name:         make a modalities dict
  set_fact:
    _modalities: "{{ _modalities | combine( {item.ansible_facts.key: item.ansible_facts.value} ) }}"
    cacheable:  no
  with_items:   "{{ mod_items.results }}"

- debug:        var=_modalities

- name:         lookup peers items
  set_fact:
    key:        "{{ item }}"
    value:
      Url:      "http://{{ hostvars[item]['orthanc_host'] }}:{{ hostvars[item]['orthanc_port'] }}"
      Username: "{{ hostvars[item]['orthanc_user'] }}"
      Password: "{{ hostvars[item]['orthanc_pword'] }}"
  with_items:   "{{ groups['orthanc_peers'] }}"
  register:     peer_items

- name:         make a peers dict
  set_fact:
    _peers:      "{{ _peers | combine( {item.ansible_facts.key: item.ansible_facts.value} ) }}"
    cacheable:  no
  with_items:   "{{ peer_items.results }}"

- debug:        var=_peers

# ------------------
# SETUP DB
# ------------------

- name: "Setup {{ c_name }} db in postgres"
  postgresql_db: "name={{ _db_name }}
                  state=present
                  login_host=localhost
                  port=5432
                  login_user=postgres
                  login_password={{ pg_admin_pw }}"

- name: "Setup orthanc user for db in postgres"
  postgresql_user: "db={{ _db_name }}
                   name=orthanc
                   password={{ orthanc_db_pw }}
                   encrypted=yes
                   state=present
                   login_host=localhost
                   port=5432
                   login_user=postgres
                   login_password={{ pg_admin_pw }}"

# ------------------
# SETUP MAPPED FOLDERS
# ------------------

- name:    "Setup data folder"
  file:
    path:  "{{ base_dir }}/orthanc/db"
    state: directory
    mode:  0777
  become:  yes
  ignore_errors: yes  # Might be a link...

- name:    "Setup config folder"
  file:
    path:  "{{ _config_dir }}"
    state: directory
    mode:  0777
  become:  yes

- name:    "Setup scripts folder"
  file:
    path:  "{{ _config_dir }}/scripts"
    state: directory
    mode:  0777
  become:  yes

- name: "Create {{ c_name }} config"
  template: >
    src=templates/orthanc.json.j2
    dest={{ _config_dir }}/orthanc.json
  become: no
  notify: restart_orthanc

- name: "Create {{ c_name }} routing lua"
  tags: "router"
  template: >
      src=templates/autorouter.lua.j2
      dest={{ _config_dir }}/scripts/autorouter.lua
  become: no
  when: destinations is defined
  notify: restart_orthanc

# Force stop if necessary
- meta: flush_handlers

# ------------------
# BUILD CONTAINER
# ------------------

- name: Setup {{ c_name }} container
  docker_container:

    name: "{{ c_name }}"
    image: osimis/orthanc
    # On RHEL, this _may_ need to be ["--logdir...", "config.json"]
    # command: ["--verbose /etc/orthanc/orthanc.json"]

    state: started
    links: "{{ ['postgres'] if not _link_peers else ['postgres']+peers.keys() }}"

    ports: "{{ _ports }}"
    volumes_from: data
    volumes:
      - "{{ _config_dir }}/orthanc.json:/etc/orthanc/orthanc.json:ro"
      - "{{ _config_dir }}/scripts:/etc/orthanc/scripts:ro"
      - "{{ _data_dir }}:/var/lib/orthanc/db"

    log_driver: splunk
    log_options:
      splunk-token:  "{{ splunk_hec_token }}"
      splunk-url:    "http://{{ indexer_ip | default(dockerhost_ip) }}:8088"
      splunk-index:  diana_svc
      splunk-source: "{{ c_name }}"

    env:
      PLUGINS_BUNDLE_DEFAULTS: false
      VERBOSE_ENABLED: true


